program     ::= declaration* EOF ;
declaration ::= varDecl | statement ;
varDecl     ::= "var" IDENTIFIER ( "=" expression )? ";" ;
statement   ::= exprStmt | forStmt | ifStmt | printStmt | whileStmt | block ;
exprStmt    ::= expression ";" ;
forStmt     ::= "for" "(" ( varDecl | exprStmt | ";" ) expression? ";" expression? ")" ( statement | breakStmt ) ;
ifStmt      ::= "if" "(" expression ")" statement ( "else" statement )? ;
breakStmt   ::= "break" ";" ;
printStmt   ::= "print" expression ";" ;
whileStmt   ::= "while" "(" expression ")" ( statement | breakStmt ) ;
block       ::= "{" declaration* | breakStmt "}" ;
expression  ::= assignment ;
assignment  ::= IDENTIFIER "=" assignment | logic_or ;
logic_or    ::= logic_and ( "or" logic_and )* ;
logic_and   ::= equality ( "and" equality )* ;
equality    ::= comparison ( ( "!=" | "==" ) comparison )* ;
comparison  ::= term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
term        ::= factor ( ( "-" | "+" ) factor )* ;
factor      ::= unary ( ( "/" | "*" ) unary )*;
unary       ::= ( "!" | "-" ) unary | call ;
call        ::= primary ( "(" arguments? ")" )* ;
arguments   ::= expression ( "," expression )* ;
primary     ::= NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")" | IDENTIFIER ;